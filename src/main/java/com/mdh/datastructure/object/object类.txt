Object类
public class Object {...}
Object类是Java中所有类的父类，每个类都默认继承Object这个超类，这也说明Object中所有公有方法都被任何类继承，Java中所有对象（包括数组）也都继承了Object的方法。

-------------------------------------------------------------------------------------------------------------------------------------------------------
native关键字
native关键字说明其修饰的方法是一个原生态方法，方法对应的实现不是在当前文件，而是在用其他语言（如C和C++）实现的文件中。
Java语言本身不能对操作系统底层进行访问和操作，但是可以通过JNI接口调用其他语言来实现对底层的访问。

JNI是Java本机接口（Java Native Interface），是一个本机编程接口，它是Java软件开发工具箱（java Software Development Kit，SDK）的一部分。
JNI允许Java代码使用以其他语言编写的代码和代码库。Invocation API（JNI的一部分）可以用来将Java虚拟机（JVM）嵌入到本机应用程序中，从而允许程序员从本机代码内部调用Java代码。

native用法：
1.编写带有native声明的方法的Java类（java文件）
2.使用javac命令编译编写的Java类（class文件）
3.使用javah -jni ****来生成后缀名为.h的头文件（.h的文件）
4.使用其他语言（C、C++）实现本地方法
5.将本地方法编写的文件生成动态链接库（dll文件）

-------------------------------------------------------------------------------------------------------------------------------------------------------
public final native Class<?> getClass();
获取Class对象

public native int hashCode();
返回对象的哈希码值

public boolean equals(Object obj) {
        return (this == obj);
    }
判断给定的类与当前类是否相同

protected native Object clone() throws CloneNotSupportedException;
创建并返回次对象的副本

public String toString() {
        return getClass().getName() + "@" + Integer.toHexString(hashCode());
    }
返回对象的字符串表达形式

public final native void notify();
唤醒正在次对象监听器上等待的单个线程

public final native void notifyAll();
唤醒正在此对象监听器的所有线程

public final void wait() throws InterruptedException {
   wait(0);
}
导致当前线程的等待，直到另外一个线程调用此对象的notify() 和notifyAll()方法

public final native void wait(long timeout) throws InterruptedException;
导致当前线程的等待，直到另外一个线程调用此对象的notify() 和notifyAll()方法或者已经过了指定的时间量

    public final void wait(long timeout, int nanos) throws InterruptedException {
        if (timeout < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
                                "nanosecond timeout value out of range");
        }

        if (nanos > 0) {
            timeout++;
        }

        wait(timeout);
    }
导致当前线程的等待，直到另外一个线程调用此对象的notify() 和notifyAll()方法，或者某个其他线程中断当前线程，或者已经过了指定的时间量


