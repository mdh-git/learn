自定义的缓存实现，即不用任何第三方的组件来实现某种对象的内存缓存。

场景是:对一个账号查询方法做缓存，以账号名称为 key，账号对象为 value，当以相同的账号名称查询账号的时候，
直接从缓存中返回结果，否则更新缓存。账号查询服务还支持 reload 缓存（即清空缓存）。

-------------------------------------------------------------------------------------------------------------
首先定义一个实体类:账号类，具备基本的 id 和 name 属性，且具备 getter 和 setter 方法
Class Account

-------------------------------------------------------------------------------------------------------------
然后定义一个缓存管理器，这个管理器负责实现缓存逻辑，支持对象的增加、修改和删除，支持值对象的泛型。
Class MyCacheManager<T>

-------------------------------------------------------------------------------------------------------------
有了实体类和一个缓存管理器，还需要一个提供账号查询的服务类，此服务类使用缓存管理器来支持账号查询缓存。
Class MyAccountService

-------------------------------------------------------------------------------------------------------------
测试类，用于测试刚才的缓存是否有效



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
自定义的缓存方案有如下劣势:
·缓存代码和业务代码耦合度太高，如上面的例子，AccountService 中的 getAccountByName（）方法中有了太多缓存的逻辑，不便于维护和变更
·不灵活，这种缓存方案不支持按照某种条件的缓存，比如只有某种类型的账号才需要缓存，这种需求会导致代码的变更
·缓存的存储这块写的比较死，不能灵活的切换为使用第三方的缓存模块
